  <div className="button-group">
         
        </div>
      </div>
 
!
 
import React, { useState, useEffect } from 'react';
import { auth, db } from '../firebase'; // Import Firebase auth and Firestore instances
import { doc, getDoc, setDoc, collection, getDocs } from 'firebase/firestore'; // Firestore functions
import avatarPlaceholder from '../assets/avatar-placeholder.png'; // Ensure this path points to your avatar image
import '../styles/StaffProfile.css';
import Navbar from '../components/Navbar';

const StaffProfile = () => {
  const [branches, setBranches] = useState([]);
  const [formData, setFormData] = useState({
    name: '',
    lastName: '',
    email: '',
    phone: '',
    role: '',
    branch: '',
    workId: '',
    avatar: avatarPlaceholder, // Add avatar to form data
  });

  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [showModal, setShowModal] = useState(false); // Modal visibility
  const [tempAvatar, setTempAvatar] = useState(null); // Temporary avatar selection

  // Fetch user data when the component mounts
  useEffect(() => {
    const fetchUserData = async () => {
      const user = auth.currentUser; // Get the currently logged-in user

      if (user) {
        try {
          // Fetch the user's data from Firestore using their UID
          const userRef = doc(db, 'users', user.uid);
          const userDoc = await getDoc(userRef);

          if (userDoc.exists()) {
            const userData = userDoc.data();
            setFormData({
              name: userData.name,
              lastName: userData.lastName,
              email: userData.email,
              phone: userData.phone,
              role: userData.role,
              branch: userData.branch,
              workId: userData.workId,
              avatar: userData.avatar || avatarPlaceholder, // Default to placeholder if no avatar
            });
          } else {
            console.error('No user data found in Firestore');
            setError('No user data found.');
          }

          // Check if profile picture exists in the `profilepictures` table
          const avatarRef = doc(db, 'profilepictures', user.uid);
          const avatarDoc = await getDoc(avatarRef);
          if (avatarDoc.exists()) {
            const avatarData = avatarDoc.data();
            setFormData((prevData) => ({
              ...prevData,
              avatar: avatarData.base64 || avatarPlaceholder,
            }));
          }
        } catch (err) {
          console.error('Error fetching user data:', err);
          setError('Failed to fetch user data. Please try again later.');
        }
      } else {
        console.error('No user is logged in.');
        setError('No user is logged in.');
      }
    };

    fetchUserData();
  }, []);

  const fetchBranches = async () => {
    try {
      const querySnapshot = await getDocs(collection(db, "branches"));
      const branchList = querySnapshot.docs.map((doc) => doc.data().branch_name);
      setBranches(branchList);
    } catch (error) {
      console.error("Error fetching branches:", error);
    }
  };

  useEffect(() => {
    fetchBranches();
  }, []);

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSave = async () => {
    setIsLoading(true);
    try {
      const user = auth.currentUser;
      if (user) {
        const userRef = doc(db, 'users', user.uid);
        await setDoc(userRef, formData, { merge: true });

        // If the user has updated the avatar, save the new base64 data to Firestore
        if (tempAvatar) {
          const avatarRef = doc(db, 'profilepictures', user.uid);
          await setDoc(avatarRef, { base64: tempAvatar }, { merge: true });
        }

        alert('Profile updated successfully!');
      } else {
        alert('You need to be logged in to update your profile.');
      }
    } catch (error) {
      console.error('Error updating profile:', error);
      alert('Failed to update profile. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleClear = () => {
    setFormData({
      name: '',
      lastName: '',
      email: '',
      phone: '',
      role: '',
      branch: '',
      workId: '',
      avatar: avatarPlaceholder,
    });
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => {
        setTempAvatar(reader.result); // base64 string
      };
      reader.readAsDataURL(file);
    }
  };

  const handleApplyAvatar = () => {
    if (tempAvatar) {
      setFormData({ ...formData, avatar: tempAvatar });
    }
    setShowModal(false);
  };

  return (
    <div className="profile-container">
      <div className="profile-image-section">
        <div className="avatar">
          <img src={formData.avatar} alt="Avatar" />
        </div>
 
 </div>
 
<div className="button-group">
 
email:'';
 

    
 
userData.lastName
 
userData.name
 
userData.lastName
 
userData.name
 
lastName: '',
 
     </div>
 
, commented coz avatar is constantly brought back
 
// Fallback to default avatar if not available
 
   )}
 
 <div className="avatar-grid">
              {avatars.map((avatar, index) => (
                <img
                  key={index}
                  src={avatar}
                  alt={`Avatar ${index + 1}`}
                  className={`avatar-option ${tempAvatar === avatar ? 'selected' : ''}`}
                  onClick={() => setTempAvatar(avatar)}
                />
              ))}
            </div>
 
<button className="select-btn" onClick={() => setShowModal(true)}>
            Select Avatar
          </button>
 
   {/* User's Avatar and Name */}
 
  <img
              src={userData.avatar || "default-avatar-url"} // Fallback to default if avatar is missing
              alt="Profile"
              className="profile-pic"
            />
 
@@ -31,26 +32,48 @@
 
    return <div>Loading...</div>;
 
@@ -82,6 +105,6 @@ function App() 
 
  left:50%;
 
3b82f6
 
flex
 
  <button className="select-btn">Select Avatar</button>
 
    <button className="select-btn">Select Avatar</button>
        </div>
 
  wid
 
right
 
left
 
file contains the modal styles

 
import Navbar from './Navbar'
 
<Navbar />
 
Dashboard
 
//
 
00
 
transp
 
2a2a2a
 
1a1a1a
 
    font-weight: bold;
 
.title{
    
}
 
 gap:2px;
 
          <p className="titles">Name and Surname </p>
 
  <p className="titles">Name and Surname </p>
 
   <select>
            <option>Select your role</option>
          </select>
          <select>
            <option>Select your branch location</option>
          </select>
 
  .select-btn .edit-btn{

  }
  
 
 
  .full-width {
    grid-column: span 1;
  }
 
